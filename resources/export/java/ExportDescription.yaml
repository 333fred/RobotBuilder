Name: Java
Type: Code
Toolbar: true
Files: files.yaml
Begin Modification: // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=$id.toUpperCase()
End Modification: // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=$id.toUpperCase()
Required Properties:
  - Java Project
  - Java Package
  
Vars:
  project: ${robot.getProperty('Java Project')}
  package: ${robot.getProperty('Java Package')}
  package-path: ${project}/src/${package.replace('.', '/')}
    
Macros: macros.vm

Defaults:
  Component:
    Export: "RobotMap"
    Import: "import edu.wpi.first.wpilibj.*;"
    Declaration: "public static ${ClassName} #constant($Name);"
    Subsystem Export: "${ClassName} ${Short_Name} = RobotMap.#constant($Name);"
  None:
    Export: ""
    Import: ""
    Declaration: ""
    Construction: ""
    Extra: ""
    Subsystem Export: ""
    ClassName: ""
    Template: ""
  AnalogInput:
    Construction: "#constant($Name) = new ${ClassName}(${Input_Module_Analog}, ${Input_Channel_Analog});"
  DigitalInput:
      Construction: "#constant($Name) = new ${ClassName}(${Input_Module_Digital}, ${Input_Channel_Digital});"
  PWMOutput:
    Construction: "#constant($Name) = new ${ClassName}(${Output_Module_Digital}, ${Output_Channel_PWM});"
  OI:
    Export: "OI"
    Import: "import edu.wpi.first.wpilibj.*;"
    Declaration: "public ${ClassName} #variable($Name);"
  Button:
    Import: "import edu.wpi.first.wpilibj.buttons.*;"
    Extra:  "#variable($Name).${When_to_Run}(new #class($Command)());"
  Command:
    Export: ""
    Import: "import ${package}.commands.*;"

Instructions:
  Robot:
    Defaults: "None"
  Subsystems:
    Defaults: "None"
  OI:
    Defaults: "None"
  Commands:
    Defaults: "None"
  Subsystem:
    Defaults: "None"
    Export: "CommandBase"
    Import: "import ${package}.subsystems.*;"
    Construction: "public static #class($Short_Name) #variable($Short_Name) = new #class($Short_Name)();"

  PID Controller:
    Defaults: "Component,None"
    ClassName: "SendablePIDController"
    Import: "import edu.wpi.first.wpilibj.smartdashboard.*;"
    Construction: "#constant($Name) = new ${ClassName}($P, $I, $D, $F, #constant($Input), #constant($Output), $Period);"
    Extra: >
      #constant($Name).setContinuous(${Continuous});
      #if( "$Limit_Input" == "true" )
      
              #constant($Name).setInputRange(${Minimum_Input}, ${Maximum_Input});#end
      #if( "$Limit_Output" == "true" )

              #constant($Name).setOutputRange(${Minimum_Output}, ${Maximum_Output});#end
      #if( "$Send_to_SmartDashboard" == "true" )

              SmartDashboard.putData("${Name}", #constant($Name));#end
      
  Robot Drive 2:
    Defaults: "Component,None"
    ClassName: "RobotDrive"
    Import: "import edu.wpi.first.wpilibj.RobotDrive.MotorType;"
    Construction: "#constant($Name) = new ${ClassName}(#constant($Left_Motor), #constant($Right_Motor));"
    Extra: >
      #constant($Name).setSafetyEnabled($Safety_Enabled);
              #constant($Name).setExpiration($Safety_Expiration_Time);
              #constant($Name).setSensitivity($Sensitivity);
              #constant($Name).setMaxOutput($Maximum_Output);
      #if( "$Left_Motor_Inverted" == "true")
              #constant($Name).setInvertedMotor(MotorType.kFrontLeft, true);#end
      #if( "$Right_Motor_Inverted" == "true")

              #constant($Name).setInvertedMotor(MotorType.kFrontRight, true);#end
              
  Robot Drive 4:
    Defaults: "Component,None"
    ClassName: "RobotDrive"
    Import: "import edu.wpi.first.wpilibj.RobotDrive.MotorType;"
    Construction: >-
      #constant($Name) = new ${ClassName}(#constant($Left_Front_Motor), #constant($Left_Rear_Motor),
                    #constant($Right_Front_Motor), #constant($Right_Rear_Motor));
    Extra: >
      #constant($Name).setSafetyEnabled($Safety_Enabled);
              #constant($Name).setExpiration($Safety_Expiration_Time);
              #constant($Name).setSensitivity($Sensitivity);
              #constant($Name).setMaxOutput($Maximum_Output);
      #if( "$Left_Front_Motor_Inverted" == "true")
              #constant($Name).setInvertedMotor(MotorType.kFrontLeft, true);#end
      #if( "$Left_Rear_Motor_Inverted" == "true")

              #constant($Name).setInvertedMotor(MotorType.kRearLeft, true);#end
      #if( "$Right_Front_Motor_Inverted" == "true")

              #constant($Name).setInvertedMotor(MotorType.kFrontRight, true);#end
      #if( "$Right_Rear_Motor_Inverted" == "true")

              #constant($Name).setInvertedMotor(MotorType.kRearRight, true);#end

  Gyro:
    Defaults: "AnalogInput,Component,None"
    ClassName: "Gyro"
    Extra: "#constant($Name).setSensitivity(${Sensitivity});"
  Accelerometer:
    Defaults: "AnalogInput,Component,None"
    ClassName: "Accelerometer"
    Extra: >-
      #constant($Name).setSensitivity(${Volts_Per_G});
              #constant($Name).setZero(${Zero_G_Volts});
  Quadrature Encoder:
    Defaults: "DigitalInput,Component,None"
    ClassName: "Encoder"
    Import: >-
      import edu.wpi.first.wpilibj.CounterBase.EncodingType;
      import edu.wpi.first.wpilibj.Encoder.PIDSourceParameter;
    Construction: "#constant($Name) = new ${ClassName}(${Channel_A_Module_Digital}, ${Channel_A_Channel_Digital}, ${Channel_B_Module_Digital}, ${Channel_B_Channel_Digital}, ${Reverse_Direction}, EncodingType.${Encoding_Type});"
    Extra: >-
      #constant($Name).setDistancePerPulse(${Distance_Per_Pulse});
              #constant($Name).setPIDSourceParameter(PIDSourceParameter.${PID_Source});
  Indexed Encoder:
    Defaults: "DigitalInput,Component,None"
    ClassName: "Encoder"
    Import: >-
      import edu.wpi.first.wpilibj.CounterBase.EncodingType;
      import edu.wpi.first.wpilibj.Encoder.PIDSourceParameter;
    Construction: "#constant($Name) = new ${ClassName}(${Channel_A_Module_Digital}, ${Channel_A_Channel_Digital}, ${Channel_B_Module_Digital}, ${Channel_B_Channel_Digital}, ${Index_Module_Digital}, ${Index_Channel_Digital}, ${Reverse_Direction});"
    Extra: >-
      #constant($Name).setDistancePerPulse(${Distance_Per_Pulse});
              #constant($Name).setPIDSourceParameter(PIDSourceParameter.${PID_Source});
  Potentiometer:
    Defaults: "AnalogInput,Component,None"
    ClassName: "AnalogChannel"
  Analog Input:
    Defaults: "AnalogInput,Component,None"
    ClassName: "AnalogChannel"
  Limit Switch:
    Defaults: "DigitalInput,Component,None"
    ClassName: "DigitalInput"
  Digital Input:
    Defaults: "DigitalInput,Component,None"
    ClassName: "DigitalInput"
      
  Victor:
    Defaults: "PWMOutput,Component,None"
    ClassName: "Victor"
  Jaguar:
    Defaults: "PWMOutput,Component,None"
    ClassName: "Jaguar"
      
  Joystick:
    Defaults: "OI,None"
    ClassName: "Joystick"
    Construction: "#variable($Name) = new ${ClassName}(${Number});"
  Joystick Button:
    Defaults: "Button,OI,None"
    ClassName: "JoystickButton"
    Construction: "#variable($Name) = new ${ClassName}(#variable($Joystick), ${Button});"
  Command:
    Defaults: "Command,None"
    Template: "Command.java"
  Command Group:
    Defaults: "Command,None"
    Template: "CommandGroup.java"
