## This file describes the export from RobotBuilder to java. The
## format is YAML 1.1 (http://www.yaml.org/) with instructions that
## are post-processed with Velocity (velocity.apache.org). 
##
## This is the actual exporter for java, but also serves as a good
## example of a complicated exporter.
##
## Name: The name of this exporter to be displayed in menus.
## Type: The type, this will affect where it is displayed.
## Toolbar: Whether or not it displays on the toolbar by default.
## Files: A YAML file pre-processed by velocity that describes which
##     files to export and how.
## Begin Modification: A string that indicates the beginning of an
##     area that will be modified and replaced by auto-generated code.
## End Modification: A string that indicates the end of an area
##     that will be modified and replaced by auto-generated code.
## Required Properties: A list of robot properties that must be filled
##     out for this export to actually begin export. If these are not
##     filled out, the export alerts the user and stops.
## Vars: A map of variable names to values that are available for the
##     entire export.
## Macros: A file containing the velocity macros for this export.
##
## Defaults: A map of default names to their instruction sets. The
##     instruction sets are a map of instruction names to instructions
##     that may contain velocity templating. These defaults are used
##     if component instructions do not specify a specific
##     instruction.
##
## Instructions: A map of palette components to their defaults and
##     instruction sets. The defaults are a comma-seperated string
##     with the highest priority default first. The instructions
##     themselves vary from language to language, in the java
##     exporter:
##
##     - Export: The export instruction specifies the file to export
##           this component to.
##     - Import: The java import so that this component is properly
##           imported in the generated java file
##     - Declaration: The declaration to declare a variable
##           representing this component.
##     - Construction: The constructor to create this component.
##     - LiveWindow: Put this component on the livewindow properly.
##     - Extra: Extra configuration for after the constructor is done.
##     - ClassName: The java class name of this object.

Name: Java
Type: Code
Toolbar: true
Files: files.yaml
Begin Modification: // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=$id.toUpperCase()
End Modification: // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=$id.toUpperCase()
Required Properties:
  - Java Project
  - Java Package
  
Vars:
  team-number: ${robot.getProperty('Team Number').getValue()}
  robot-name: ${robot.getName()}
  project: ${robot.getProperty('Java Project').getValue()}
  use-default-package-p: ${robot.getProperty('Use Default Java Package').getValue()}
  package: "#if($use-default-package-p==true)org.usfirst.frc${team-number}.${robot-name}#else${robot.getProperty('Java Package').getValue()}#end"
  package-path: ${project}/src/${package.replace('.', '/')}
    
Macros: macros.vm

##Post Export Action: "netbeans --open $project"

Instruction Names: ["Export", "Import", "Declaration", "Construction", "LiveWindow", "Extra", "Function", "ClassName"]

Defaults:
  Component:
    Export: "RobotMap"
    Import: "import edu.wpi.first.wpilibj.*;"
    Declaration: "public static ${ClassName} #constant($Name);"
  None:
    Export: ""
    Import: ""
    Declaration: ""
    Construction: ""
    LiveWindow: ""
    Extra: ""
    Function: ""
    ClassName: ""
  AnalogInput:
    Construction: "#constant($Name) = new ${ClassName}(${Input_Module_Analog}, ${Input_Channel_Analog});"
    LiveWindow: "LiveWindow.addSensor(\"$Subsystem\", \"$Short_Name\", #constant($Name));"
  DigitalInput:
    Construction: "#constant($Name) = new ${ClassName}(${Input_Module_Digital}, ${Input_Channel_Digital});"
    LiveWindow: "LiveWindow.addSensor(\"$Subsystem\", \"$Short_Name\", #constant($Name));"
  PWMOutput:
    Construction: "#constant($Name) = new ${ClassName}(${Output_Module_Digital}, ${Output_Channel_PWM});"
    LiveWindow: "LiveWindow.addActuator(\"$Subsystem\", \"$Short_Name\", #constant($Name));"
  RelayOutput:
    Construction: "#constant($Name) = new ${ClassName}(${Output_Module_Digital}, ${Output_Channel_Relay});"
    LiveWindow: "LiveWindow.addActuator(\"$Subsystem\", \"$Short_Name\", #constant($Name));"
  SolenoidOutput:
    Construction: "#constant($Name) = new ${ClassName}(${Output_Module_Solenoid}, ${Output_Channel_Solenoid});"
    LiveWindow: "LiveWindow.addActuator(\"$Subsystem\", \"$Short_Name\", #constant($Name));"
  OI:
    Export: "OI"
    Import: "import edu.wpi.first.wpilibj.*;"
    Declaration: "public ${ClassName} #variable($Name);"
  Button:
    Import: "import edu.wpi.first.wpilibj.buttons.*;"
    Extra:  "#if(\"$Command\" != \"None\")#variable($Name).${When_to_Run}(new #class($Command)());#end"
  Command:
    Export: ""
    Import: "import ${package}.commands.*;"

Instructions:
  Robot:
    Defaults: "None"
  Subsystems:
    Defaults: "None"
  OI:
    Defaults: "None"
  Commands:
    Defaults: "None"
  Subsystem:
    Defaults: "None"
    Export: "Robot"
    Import: "import ${package}.subsystems.*;"
    Declaration: "public static #class($Short_Name) #variable($Short_Name);"
    Construction: "#variable($Short_Name) = new #class($Short_Name)();"
  PID Subsystem:
    Defaults: "None"
    Export: "Robot"
    Import: "import ${package}.subsystems.*;"
    Declaration: "public static #class($Short_Name) #variable($Short_Name);;"
    Construction: "#variable($Short_Name) = new #class($Short_Name)();"

  PID Controller:
    Defaults: "Component,None"
    ClassName: "SendablePIDController"
    Import: "import edu.wpi.first.wpilibj.smartdashboard.*;"
    Construction: "#constant($Name) = new ${ClassName}($P, $I, $D, $F, #constant($Input), #constant($Output), $Period);"
    Extra: >
      #constant($Name).setContinuous(${Continuous});
      #if($Limit_Input)
      
              #constant($Name).setInputRange(${Minimum_Input}, ${Maximum_Input});#end
      #if(true)

              #constant($Name).setOutputRange(${Minimum_Output}, ${Maximum_Output});#end
      #if($Send_to_SmartDashboard)

              //SmartDashboard.putData("${Name}", #constant($Name));#end
      
  Robot Drive 2:
    Defaults: "Component,None"
    ClassName: "RobotDrive"
    Import: "import edu.wpi.first.wpilibj.RobotDrive.MotorType;"
    Construction: "#constant($Name) = new ${ClassName}(#constant($Left_Motor), #constant($Right_Motor));"
    Extra: >
      #constant($Name).setSafetyEnabled($Safety_Enabled);
              #constant($Name).setExpiration($Safety_Expiration_Time);
              #constant($Name).setSensitivity($Sensitivity);
              #constant($Name).setMaxOutput($Maximum_Output);
      #if($Left_Motor_Inverted)
              #constant($Name).setInvertedMotor(MotorType.kRearLeft, true);#end
      #if($Right_Motor_Inverted)

              #constant($Name).setInvertedMotor(MotorType.kRearRight, true);#end
              
  Robot Drive 4:
    Defaults: "Component,None"
    ClassName: "RobotDrive"
    Import: "import edu.wpi.first.wpilibj.RobotDrive.MotorType;"
    Construction: >-
      #constant($Name) = new ${ClassName}(#constant($Left_Front_Motor), #constant($Left_Rear_Motor),
                    #constant($Right_Front_Motor), #constant($Right_Rear_Motor));
    Extra: >
      #constant($Name).setSafetyEnabled($Safety_Enabled);
              #constant($Name).setExpiration($Safety_Expiration_Time);
              #constant($Name).setSensitivity($Sensitivity);
              #constant($Name).setMaxOutput($Maximum_Output);
      #if($Left_Front_Motor_Inverted)
              #constant($Name).setInvertedMotor(MotorType.kFrontLeft, true);#end
      #if($Left_Rear_Motor_Inverted)

              #constant($Name).setInvertedMotor(MotorType.kRearLeft, true);#end
      #if($Right_Front_Motor_Inverted)

              #constant($Name).setInvertedMotor(MotorType.kFrontRight, true);#end
      #if($Right_Rear_Motor_Inverted)

              #constant($Name).setInvertedMotor(MotorType.kRearRight, true);#end

  Gyro:
    Defaults: "AnalogInput,Component,None"
    ClassName: "Gyro"
    Extra: "#constant($Name).setSensitivity(${Sensitivity});"
  Accelerometer:
    Defaults: "AnalogInput,Component,None"
    ClassName: "Accelerometer"
    Extra: >-
      #constant($Name).setSensitivity(${Volts_Per_G});
              #constant($Name).setZero(${Zero_G_Volts});
  Quadrature Encoder:
    Defaults: "DigitalInput,Component,None"
    ClassName: "Encoder"
    Import: >-
      import edu.wpi.first.wpilibj.CounterBase.EncodingType;
      import edu.wpi.first.wpilibj.Encoder.PIDSourceParameter;
    Construction: "#constant($Name) = new ${ClassName}(${Channel_A_Module_Digital}, ${Channel_A_Channel_Digital}, ${Channel_B_Module_Digital}, ${Channel_B_Channel_Digital}, ${Reverse_Direction}, EncodingType.${Encoding_Type});"
    Extra: >-
      #constant($Name).setDistancePerPulse(${Distance_Per_Pulse});
              #constant($Name).setPIDSourceParameter(PIDSourceParameter.${PID_Source});
  Indexed Encoder:
    Defaults: "DigitalInput,Component,None"
    ClassName: "Encoder"
    Import: >-
      import edu.wpi.first.wpilibj.CounterBase.EncodingType;
      import edu.wpi.first.wpilibj.Encoder.PIDSourceParameter;
    Construction: "#constant($Name) = new ${ClassName}(${Channel_A_Module_Digital}, ${Channel_A_Channel_Digital}, ${Channel_B_Module_Digital}, ${Channel_B_Channel_Digital}, ${Index_Module_Digital}, ${Index_Channel_Digital}, ${Reverse_Direction});"
    Extra: >-
      #constant($Name).setDistancePerPulse(${Distance_Per_Pulse});
              #constant($Name).setPIDSourceParameter(PIDSourceParameter.${PID_Source});
  Gear Tooth Sensor:
    Defaults: "DigitalInput,Component,None"
    ClassName: "GearTooth"
    Extra: "#if($Direction_Sensitive)#constant($Name).enableDirectionSensing($Direction_Sensitive);#end"
  Potentiometer:
    Defaults: "AnalogInput,Component,None"
    ClassName: "AnalogChannel"
  Analog Input:
    Defaults: "AnalogInput,Component,None"
    ClassName: "AnalogChannel"
  Limit Switch:
    Defaults: "DigitalInput,Component,None"
    ClassName: "DigitalInput"
  Digital Input:
    Defaults: "DigitalInput,Component,None"
    ClassName: "DigitalInput"
  Ultrasonic:
    Defaults: "DigitalInput,Component,None"
    ClassName: "Ultrasonic"
    Construction: "#constant($Name) = new ${ClassName}(${Ping_Module_Digital}, ${Ping_Channel_Digital}, ${Echo_Module_Digital}, ${Echo_Channel_Digital});"
      
  Jaguar:
    Defaults: "PWMOutput,Component,None"
    ClassName: "Jaguar"
  CAN Jaguar:
    Defaults: "Component,None"
    ClassName: "CANJaguar"
    Import: "import edu.wpi.first.wpilibj.can.*;"
    Construction: >-
        try { 
                    #constant($Name) = new CANJaguar($CAN_ID);
                } catch (CANTimeoutException ex) {
                    ex.printStackTrace();
                }
  Victor:
    Defaults: "PWMOutput,Component,None"
    ClassName: "Victor"
  Servo:
    Defaults: "PWMOutput,Component,None"
    ClassName: "Servo"
  Digital Output:
    Defaults: "Component,None"
    ClassName: "DigitalOutput"
    Construction: "#constant($Name) = new ${ClassName}(${Output_Module_Digital}, ${Output_Channel_Digital});"
  Spike:
    Defaults: "RelayOutput,Component,None"
    ClassName: "Relay"

  Compressor:
    Defaults: "Component,None"
    ClassName: "Compressor"
    Construction: "#constant($Name) = new ${ClassName}(${Pressure_Switch_Module_Digital}, ${Pressure_Switch_Channel_Digital}, ${Spike_Module_Digital}, ${Spike_Channel_Relay});"
  Solenoid:
    Defaults: "SolenoidOutput,Component,None"
    ClassName: "Solenoid"
  Relay Solenoid:
    Defaults: "RelayOutput,Component,None"
    ClassName: "Relay"
  Double Solenoid:
    Defaults: "Solenoid,Component,None"
    ClassName: "DoubleSolenoid"
    Construction: >-
      #if(${Forward_Module_Solenoid} != ${Reverse_Module_Solenoid})Warning, the two modules in robot builder are different!
      
      #end##
      
      #constant($Name) = new ${ClassName}(${Forward_Module_Solenoid}, ${Forward_Channel_Solenoid}, ${Reverse_Channel_Solenoid});      

  Joystick:
    Defaults: "OI,None"
    ClassName: "Joystick"
    Construction: "#variable($Name) = new ${ClassName}(${Number});"
    Function: >-
      public ${ClassName} get#class($Name)() {
              return #variable($Name);
          }
  Joystick Button:
    Defaults: "Button,OI,None"
    ClassName: "JoystickButton"
    Construction: "#variable($Name) = new ${ClassName}(#variable($Joystick), ${Button});"
  Kinect Joystick:
    Defaults: "OI,None"
    ClassName: "KinectStick"
    Construction: "#variable($Name) = new ${ClassName}(${Number});"
    Function: >-
      public ${ClassName} get#class($Name)() {
              return #variable($Name);
          }
  Analog Button:
    Defaults: "Button,OI,None"
    ClassName: "AnalogIOButton"
    Construction: "#variable($Name) = new ${ClassName}(#variable($Analog_Pin));"
  Digital Button:
    Defaults: "Button,OI,None"
    ClassName: "DigitalIOButton"
    Construction: "#variable($Name) = new ${ClassName}(#variable($Digital_Pin));"
  OI Digital Input:
    Defaults: "OI,None"
    Function: >-
      public boolean get#class($Name)() {
              return DriverStation.getInstance().getDigitalIn($Digital_Pin);
          }
  OI Digital Output:
    Defaults: "OI,None"
    Function: >-
      public void set#class($Name)(boolean value) {
              DriverStation.getInstance().setDigitalOut($Digital_Pin, value);
          }
  OI Analog Input:
    Defaults: "OI,None"
    Function: >-
      public double get#class($Name)() {
              return DriverStation.getInstance().getAnalogIn($Analog_Pin);
          }

  Command:
    Defaults: "Command,None"
  Command Group:
    Defaults: "Command,None"
  PID Command:
    Defaults: "Command,None"
  Setpoint Command:
    Defaults: "Command,None"
