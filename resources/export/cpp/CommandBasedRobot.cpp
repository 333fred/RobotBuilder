\#include "WPILib.h"
\#include "Commands/Command.h"
\#include "Commands/ExampleCommand.h"
\#include "CommandBase.h"

class CommandBasedRobot : public IterativeRobot {
public:
	Command *autonomousCommand;
        static OI oi;
#@autogenerated_code("declarations", "    ")
#parse("${exporter-path}CommandBasedRobot-declarations.cpp")
#end
	
	virtual void RobotInit() {
                RobotMap::init();
#@autogenerated_code("constructors", "        ")
#parse("${exporter-path}CommandBasedRobot-constructors.cpp")
#end
        // This MUST be here. If the OI creates Commands (which it very likely
        // will), constructing it during the construction of CommandBase (from
        // which commands extend), subsystems are not guaranteed to be
        // yet. Thus, their requires() statements may grab null pointers. Bad
        // news. Don't move it.
        oi = new OI();

        // instantiate the command used for the autonomous period
#@autogenerated_code("autonomous", "        ")
#parse("${exporter-path}CommandBasedRobot-autonomous.cpp")
#end
	}
	
	virtual void AutonomousInit() {
		autonomousCommand->Start();
	}
	
	virtual void AutonomousPeriodic() {
		Scheduler::GetInstance()->Run();
	}
	
	virtual void TeleopInit() {
		// This makes sure that the autonomous stops running when
		// teleop starts running. If you want the autonomous to 
		// continue until interrupted by another command, remove
		// this line or comment it out.
		autonomousCommand->Cancel();
	}
	
	virtual void TeleopPeriodic() {
		Scheduler::GetInstance()->Run();
		LiveWindow::run();
	}
};

START_ROBOT_CLASS(CommandBasedRobot);

