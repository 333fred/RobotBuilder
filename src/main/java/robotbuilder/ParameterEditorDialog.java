
package robotbuilder;

import java.awt.Color;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;
import javax.swing.JFrame;
import javax.swing.table.DefaultTableModel;

import robotbuilder.data.RobotComponent;
import robotbuilder.data.properties.ParametersProperty;
import robotbuilder.data.properties.Property;
import robotbuilder.data.properties.ValuedParameterDescriptor;

/**
 * Dialog for editing command parameters.
 *
 * @author Sam Carlberg
 */
public class ParameterEditorDialog extends CenteredDialog {

    private final ParametersProperty paramProp;
    private List<ValuedParameterDescriptor> parameterList;

    public ParameterEditorDialog(RobotComponent component, JFrame owner, boolean modal) {
        super(owner, "Edit parameters");
        paramProp = (ParametersProperty) component.getProperty("Parameters");
        Property commandProp = component.getProperty("Command"); // for use by buttons etc.
        if (commandProp == null) {
            commandProp = component.getProperty("Default Command"); // for use by subsystems
        }
        if (commandProp == null) {
            commandProp = component.getProperty("Autonomous Command"); // for use by the main Robot class
        }
        if (commandProp == null) { // give up
            throw new NullPointerException("No command property exists for component " + component);
        }
        ParametersProperty commandParams = ParametersProperty.getCommandParameterMap().get((String) commandProp.getValue());
        paramProp.matchUpWith(commandParams);
        parameterList = (List<ValuedParameterDescriptor>) paramProp.getValue();
        initComponents();
        parameterTable.setShowHorizontalLines(true);
        parameterTable.setShowVerticalLines(true);
        parameterTable.setRowHeight(25);
        parameterTable.setBackground(new Color(240, 240, 240));
        parameterTable.setGridColor(Color.BLACK);
        parameterList.stream().forEach(p -> getTableModel().addRow(p.toArray()));
    }

    public ParametersProperty showAndGetProperty() {
        setVisible(true);
        return paramProp;
    }

    public List<ValuedParameterDescriptor> showAndGetParameters() {
        setVisible(true);
        return getParameters();
    }

    public List<ValuedParameterDescriptor> getParameters() {
        return (List<ValuedParameterDescriptor>) paramProp.getValue();
    }

    private void save() {
        Vector<Vector<Object>> dataVector = getTableModel().getDataVector();
        List<ValuedParameterDescriptor> params = new ArrayList<>();
        dataVector.stream().forEach((dataRow) -> {
            String name = (String) dataRow.get(0);
            ValuedParameterDescriptor existing = paramProp.getParameterByName(name);
            existing.setValue(dataRow.get(2));
            params.add(existing);
        });
        paramProp.setValueAndUpdate(params);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        parameterTable = new robotbuilder.ParameterEditorTable();
        saveButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        parameterTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Type", "Value"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        parameterTable.setDragEnabled(true);
        parameterTable.setShowGrid(true);
        parameterTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(parameterTable);

        saveButton.setText("Save and close");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(saveButton))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 267, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(saveButton))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        save();
        dispose();
    }//GEN-LAST:event_saveButtonActionPerformed

    private DefaultTableModel getTableModel() {
        return (DefaultTableModel) parameterTable.getModel();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable parameterTable;
    private javax.swing.JButton saveButton;
    // End of variables declaration//GEN-END:variables
}
