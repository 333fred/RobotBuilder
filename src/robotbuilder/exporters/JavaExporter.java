/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package robotbuilder.exporters;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import robotbuilder.MainFrame;
import robotbuilder.RobotTree;
import robotbuilder.data.RobotComponent;
import robotbuilder.data.RobotWalker;

/**
 *
 * @author Alex Henning
 */
public class JavaExporter extends AbstractExporter {
    private final static String EXPORT_INFO = "export/java/";
    private final static String DESCRIPTION_PATH = EXPORT_INFO+"ExportDescription.json";
    private final static String[] DESCRIPTION_PROPERTIES = {"Export", "Import", "Declaration",
        "Construction", "Extra", "ClassName", "Subsystem Export", "Template"};
    private final static String ROBOT_MAP_TEMPLATE = EXPORT_INFO+"RobotMap.java";
    private final static String OI_TEMPLATE = EXPORT_INFO+"OI.java";
    private final static String COMMAND_BASE_TEMPLATE = EXPORT_INFO+"CommandBase.java";
    private final static String SUBSYSTEM_TEMPLATE = EXPORT_INFO+"Subsystem.java";

    @Override
    public void export(RobotTree robot) throws IOException {
        System.out.println("Loading export description for java");
        loadExportDescription(DESCRIPTION_PATH, DESCRIPTION_PROPERTIES);
        
        // Sets up for export
        getPath(robot.getRoot()); // TODO: Ugly hack
        _package = robot.getRoot().getProperty("Java Package");
        robot.walk(new RobotWalker() {
            @Override
            public void handleRobotComponent(RobotComponent self) {
                self.updateComboBoxes();
            }
        });

        // The RobotMap
        System.out.println("Loading template "+ROBOT_MAP_TEMPLATE);
        System.out.println("Exporting RobotMap");
        String template = loadTemplate(ROBOT_MAP_TEMPLATE);
        template = substitute(template, "package", robot.getRoot().getProperty("Java Package"));
        template = substitute(template, "imports", generateImports(robot.getRoot(), "RobotMap"));
        template = substitute(template, "declarations", generateDeclarations(robot, "RobotMap"));
        template = substitute(template, "constructions", generateConstructions(robot, "RobotMap"));
        
        System.out.println("Writing RobotMap file");
        FileWriter out = new FileWriter(getPath(robot.getRoot())+"RobotMap.java");
        out.write(template);
        out.close();
        
        // The OI
        System.out.println("Exporting OI.");
        if (oiExists(robot.getRoot())) {
            System.out.println("Exists, modifying.");
            template = loadTemplate(getPath(robot.getRoot())+"/OI.java");
            template = updateAutogeneratedCode("declarations", template, generateDeclarations(robot, "OI"));
            template = updateAutogeneratedCode("constructors", template, generateConstructions(robot, "OI"));
        } else {
            System.out.println("Doesn't exist, creating.");
            template = loadTemplate(OI_TEMPLATE);
            template = substitute(template, "package", robot.getRoot().getProperty("Java Package"));
            template = substitute(template, "imports", generateImports(robot.getRoot(), "OI"));
            template = substitute(template, "OI Declarations", generateDeclarations(robot, "OI"));
            template = substitute(template, "OI Constructors", generateConstructions(robot, "OI"));
        }
        
        System.out.println("Writing RobotMap file");
        FileWriter oiOut = new FileWriter(getPath(robot.getRoot())+"OI.java");
        oiOut.write(template);
        oiOut.close();
        
        // The CommandBase
        System.out.println("Exporting CommandBase.");
        if (commandbaseExists(robot.getRoot())) {
            System.out.println("Exists, modifying.");
            template = loadTemplate(getPath(robot.getRoot())+"/commands/CommandBase.java");
            template = updateAutogeneratedCode("constructors", template, generateConstructions(robot, "CommandBase"));
        } else {
            System.out.println("Doesn't exist, creating.");
            template = loadTemplate(COMMAND_BASE_TEMPLATE);
            template = substitute(template, "package", robot.getRoot().getProperty("Java Package"));
            template = substitute(template, "imports", generateImports(robot.getRoot(), "CommandBase"));
            template = substitute(template, "constructors", generateConstructions(robot, "CommandBase"));
        }
        
        System.out.println("Writing RobotMap file");
        FileWriter commandbaseOut = new FileWriter(getPath(robot.getRoot())+"commands/CommandBase.java");
        commandbaseOut.write(template);
        commandbaseOut.close();
        
        
        // The Subsystems
        if (robot.getRoot().getProperty("Export Subsystems").equals("true")) {
            System.out.println("Exporting Subsystems");
            for (RobotComponent subsystem : robot.getSubsystems()) {
                System.out.println("\tExporting Subsystem: "+subsystem);
                if (subsystemExists(subsystem, robot.getRoot())) {
                    System.out.println("\t\tExists, modifying.");
                    template = loadTemplate(getPath(robot.getRoot())+"/subsystems/"+getClassName(subsystem)+".java");
                    template = updateAutogeneratedCode("subsystem", template, generateSubsystemExport(subsystem));
                    if (hasDefaultCommand(subsystem)) {
                        template = updateAutogeneratedCode("default_command", template, generateSubsystemDefaultCommand(subsystem));
                    } else {
                        template = updateAutogeneratedCode("default_command", template, "");
                    }
                } else {
                    System.out.println("\t\tDoesn't exist, creating.");
                    template = loadTemplate(SUBSYSTEM_TEMPLATE);
                    template = substitute(template, "package", robot.getRoot().getProperty("Java Package"));
                    template = substitute(template, "imports", generateImports(subsystem, "RobotMap"));
                    template = substitute(template, "Subsystem Name", getClassName(subsystem));
                    template = substitute(template, "Subsystem Export", generateSubsystemExport(subsystem));
                    if (hasDefaultCommand(subsystem)) {
                        template = substitute(template, "Default Command", generateSubsystemDefaultCommand(subsystem));
                        template = substitute(template, "Default Command Import", "import "+robot.getRoot().getProperty("Java Package")+".commands."+getClassName(subsystem.getProperty("Default Command")) +";\n");
                    } else {
                        template = substitute(template, "Default Command", "");
                        template = substitute(template, "Default Command Import", "");
                    }
                }
                System.out.println("\tWriting "+getShortName(subsystem)+".java file");
                FileWriter subsystemOut = new FileWriter(getPath(robot.getRoot())+"/subsystems/"+getClassName(subsystem)+".java");
                subsystemOut.write(template);
                subsystemOut.close();
            }
        }
        
        // The Commands
        if (robot.getRoot().getProperty("Export Commands").equals("true")) {
            System.out.println("Exporting Commands");
            for (RobotComponent command : robot.getCommands()) {
                System.out.println("\tExporting Command: "+command);
                if (commandExists(command, robot.getRoot())) {
                    System.out.println("\t\tExists, ignoring.");
                    template = loadTemplate(getPath(robot.getRoot())+"/commands/"+getClassName(command)+".java");
                    if (hasRequires(command)) {
                        template = updateAutogeneratedCode("requires", template, generateCommandRequires(command));
                    } else {
                        template = updateAutogeneratedCode("requires", template, "");
                    }

                } else {
                    System.out.println("\t\tDoesn't exist, creating.");
                    template = loadTemplate(this.EXPORT_INFO+componentInstructions.get(command.getBase().getType()).get("Template"));
                    template = substitute(template, "package", robot.getRoot().getProperty("Java Package"));
                    template = substitute(template, "Command Name", getClassName(command));
                    if (hasRequires(command)) {
                        template = substitute(template, "Command Requires", generateCommandRequires(command));
                    } else {
                        template = substitute(template, "Command Requires", "");
                    }
                }
                System.out.println("Writing "+getClassName(command)+".java file");
                FileWriter commandOut = new FileWriter(getPath(robot.getRoot())+"/commands/"+getClassName(command)+".java");
                commandOut.write(template);
                commandOut.close();
            }
        }
        
        System.out.println("Done");
    }
    
    /**
     * Generate the import statements for the exported robot map file.
     * @param robot
     * @return The String of import statements
     */
    private String generateImports(RobotComponent robot, final String export) {
        final Set<String> imports = new TreeSet<String>();
        robot.walk(new RobotWalker() {
            @Override
            public void handleRobotComponent(RobotComponent self) {
                final Map<String, String> instructions = componentInstructions.get(self.getBase().getName());
                if (export.equals(instructions.get("Export"))) {
                    String instruction = instructions.get("Import");
                    String className = instructions.get("ClassName");
                    imports.add(substitute(instruction, self, className));
                }
            }
        });
        
        String out = "";
        for (String imp : imports) {
            if (!"".equals(imp)) out += imp + "\n";
        }
        return out;
    }
    
    private String generateDeclarations(RobotTree robot, final String export) {
        final LinkedList<String> declarations = new LinkedList<String>();
        robot.walk(new RobotWalker() {
            @Override
            public void handleRobotComponent(RobotComponent self) {
                final Map<String, String> instructions = componentInstructions.get(self.getBase().getName());
                if (export.equals(instructions.get("Export"))) {
                    String instruction = instructions.get("Declaration");
                    String className = instructions.get("ClassName");
                    declarations.add(substitute(instruction, self, className));
                }
            }
        });
        
        String out = "";
        for (String dec : declarations) {
            if (!"".equals(dec)) out += "    " + dec + "\n";
        }
        return out;
    }
    
    private String generateConstructions(RobotTree robot, final String export) {
        final LinkedList<String> constructions = new LinkedList<String>();
        robot.walk(new RobotWalker() {
            @Override
            public void handleRobotComponent(RobotComponent self) {
                final Map<String, String> instructions = componentInstructions.get(self.getBase().getName());
                if (export.equals(instructions.get("Export"))) {
                    String instruction = instructions.get("Construction");
                    String extraInstruction = instructions.get("Extra");
                    String className = instructions.get("ClassName");
                    constructions.add(substitute(instruction, self, className));
                    constructions.add(substitute(extraInstruction, self, className));
                }
            }
        });

        String out = "";
        for (String cons : constructions) {
            if (!"".equals(cons)) out += "        " + cons + "\n";
        }
        return out;
    }
    
    private boolean fileExists(String file) throws IOException {
        return (new File(file)).exists();
    }
    
    private boolean oiExists(RobotComponent robot) throws IOException {
        return fileExists(getPath(robot)+"/OI.java");
    }
    
    private boolean commandbaseExists(RobotComponent robot) throws IOException {
        return fileExists(getPath(robot)+"/commands/CommandBase.java");
    }
    
    private boolean subsystemExists(RobotComponent subsystem, RobotComponent robot) throws IOException {
        return fileExists(getPath(robot)+"/subsystems/"+getFullName(subsystem)+".java");
    }
    
    private String generateSubsystemExport(RobotComponent subsystem) {
        final LinkedList<String> components = new LinkedList<String>();
        subsystem.walk(new RobotWalker() {
            @Override
            public void handleRobotComponent(RobotComponent self) {
                String instruction = componentInstructions.get(self.getBase().getName()).get("Subsystem Export");
                String className = componentInstructions.get(self.getBase().getName()).get("ClassName");
                System.out.println(self.getBase().getName()+": "+className+" -- "+instruction);
                components.add(substitute(instruction, self, className));
            }
        });

        String out = "";
        for (String comp : components) {
            if (!"".equals(comp)) out += "    " + comp + "\n";
        }
        return out;
    }
    
    private String generateSubsystemDefaultCommand(RobotComponent subsystem) {
        return "        setDefaultCommand(new "+getClassName(subsystem.getProperty("Default Command"))+"());";
    }

    private boolean hasDefaultCommand(RobotComponent subsystem) {
        return !subsystem.getProperty("Default Command").equals("None");
    }
    
    private boolean commandExists(RobotComponent command, RobotComponent robot) throws IOException {
        return fileExists(getPath(robot)+"/commands/"+getClassName(command)+".java");
    }
    
    private String generateCommandRequires(RobotComponent command) {
        return "        requires(CommandBase."+getShortName(command.getProperty("Requires"))+");";
    }

    private boolean hasRequires(RobotComponent command) {
        return !command.getProperty("Requires").equals("None");
    }
    
    private String getPath(RobotComponent robot) throws IOException {
        if ((robot.getProperty("Java Package")).equals("")) {
            String packageName = (String) JOptionPane.showInputDialog(MainFrame.getInstance().getFrame(), "Java Package", "Java Package", JOptionPane.PLAIN_MESSAGE, null, null, null);
            robot.setProperty("Java Package", packageName);
        }
        if ((robot.getProperty("Java Project")).equals("")) {
            String file = null;
            JFileChooser fileChooser = new JFileChooser();
            fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            int result = fileChooser.showDialog(MainFrame.getInstance().getFrame(), "Export");
            if (result == JFileChooser.CANCEL_OPTION) {
                throw new IOException("No file selected.");
            } else if (result == JFileChooser.ERROR_OPTION) {
                throw new IOException("Error selecting file.");
            } else if (result == JFileChooser.APPROVE_OPTION) {
                file = fileChooser.getSelectedFile().getAbsolutePath();
            }
            robot.setProperty("Java Project", file);
        }
        return robot.getProperty("Java Project")+"/src/"+robot.getProperty("Java Package").replace(".", "/")+"/";
    }

    @Override
    public String getFullName(RobotComponent comp) {
        if (comp.getBase().getType().equals("Subsystem")) {
            return comp.getFullName().replace(" ", "_");
        } else {
            return getFullName(comp.getFullName());
        }
    }
    
    @Override
    public String getFullName(String s) {
        return s.toUpperCase().replace(" ", "_");
    }

    @Override
    public String getShortName(RobotComponent comp) {
        return getShortName(comp.getName());
    }

    @Override
    public String getShortName(String s) {
        return s.substring(0, 1).toLowerCase()+s.replace(" ", "").substring(1);
    }

    @Override
    public String getClassName(RobotComponent comp) {
        return getClassName(comp.getName());
    }

    @Override
    public String getClassName(String s) {
        return s.replace(" ", "");
    }
    
    private String updateAutogeneratedCode(String id, String source, String update) {
        String beginning = "// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID="+id.toUpperCase();
        String end = "// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID="+id.toUpperCase();
        return source.replaceFirst(beginning+"([\\s\\S]*?)"+end,
                       beginning+"\n"+update+"\n    "+end);
    }
}
